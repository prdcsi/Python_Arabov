import os
import zipfile
import logging
from datetime import datetime
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename='backup.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

def get_user_input():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ –∏ –ø–∞–ø–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    source = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ: ").strip()
    destination = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: ").strip()
    return source, destination

def validate_paths(source, destination):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    if not os.path.exists(source):
        raise FileNotFoundError(f"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source}")
    if not os.path.isdir(source):
        raise NotADirectoryError(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {source}")
    if not os.path.exists(destination):
        os.makedirs(destination)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {destination}")

def create_zip_archive(source, destination):
    """–°–æ–∑–¥–∞—ë—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archive_name = f"backup_{timestamp}.zip"
    archive_path = os.path.join(destination, archive_name)

    try:
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(source):
                for file in files:
                    file_path = os.path.join(root, file)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç source
                    arcname = os.path.relpath(file_path, source)
                    zipf.write(file_path, arcname)
                    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {arcname}")
        logging.info(f"–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {archive_path}")
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {archive_path}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    try:
        print("üóÉÔ∏è –£—Ç–∏–ª–∏—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        source, destination = get_user_input()
        validate_paths(source, destination)
        create_zip_archive(source, destination)
    except KeyboardInterrupt:
        logging.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()